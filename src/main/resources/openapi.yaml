openapi: 3.1.0
info:
  title: Product API
  description: API para gestionar productos.
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Servidor de desarrollo

paths:
  /products:
    get:
      summary: Get all products
      responses:
        '200':
          description: Lista de productos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
              examples:
                ejemplo:
                  value:
                    - id: "64f25d1c8b9f1a7c2d123456"
                      name: "Laptop Dell XPS"
                      price: 1200.50
                      stock: 10
                    - id: "64f25d1c8b9f1a7c2d123457"
                      name: "iPhone 14"
                      price: 999.99
                      stock: 5
    post:
      summary: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
            example:
              name: "Laptop Dell XPS"
              price: 1200.50
              stock: 10
      responses:
        '201':
          description: Producto creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /products/{id}:
    put:
      summary: Update product (except stock)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdateRequest'
            example:
              name: "Laptop Dell XPS 13"
              price: 1100.00
      responses:
        '200':
          description: Producto actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

    delete:
      summary: Delete product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Producto eliminado exitosamente

  /products/{id}/purchase:
    post:
      summary: Purchase product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: quantity
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Compra realizada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Error - No hay suficiente stock
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: "Not enough stock for product with id 64f25d1c8b9f1a7c2d123456"

components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        price:
          type: number
          format: float
        stock:
          type: integer

    ProductRequest:
      type: object
      properties:
        name:
          type: string
        price:
          type: number
        stock:
          type: integer
      required: [name, price, stock]

    ProductUpdateRequest:
      type: object
      properties:
        name:
          type: string
        price:
          type: number
      required: [name, price]